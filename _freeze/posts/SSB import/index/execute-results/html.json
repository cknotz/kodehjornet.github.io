{
  "hash": "c83bd45fbac9d87c835b371f8a0f7761",
  "result": {
    "markdown": "---\ntitle: \"Hvordan importere data fra SSB\"\nauthor: \"Knut Solvig\"\ndate: \"2023-11-07\"\ncategories: [how-to, code, SSB, statistisk sentralbyrå, quantitative, Norwegian]\nimage: \"SSB_main.jpg\"\n---\n\n\n# Hva er SSB?\n\nStatistisk sentralbyrå (SSB) driver med innsamling og analyse av data om mange ulike norske parametere.\n\n# Hvordan importere data fra SSB til R\n\nFor å importere data fra SSB til R trenger man en pakke som heter `PxWebApiData` . Dokumentasjonen på denne pakken kan være litt komplisert, og dermed lager vi dette blogg innlegget for å gjøre det enkelt for deg og forstå slik at du slipper å kaste bort verdifull tid! La oss begynne! *Nederst i blogg innlegget ligger det en lenke til `.R` filen slik at du selv kan prøve deg frem.*\n\n## Steg 1: Installere og laste inn `PxWebApiData` \n\nFølgende kode vil installere og laste inn pakken som trengs videre. Jeg laster også inn `tidyverse` da denne er nyttig for senere når vi skal visualisere funnene fra SSB:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"PxWebApiData\")) install.packages(\"PxWebApiData\") # Install package PxWebApiData if not found.\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: PxWebApiData\n```\n:::\n\n```{.r .cell-code}\nlibrary(PxWebApiData) # Load PxWebApiData package\nlibrary(tidyverse) # Load tidyverse package\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Steg 2: Finn data\n\nNår du er inne i SSB kan du lete etter en tabell som du ønsker å bruke for å gjøre dine analyser. Se for eksempel på denne tabellen: [SSB - Stortingsvalget listekandidater](https://www.ssb.no/valg/stortingsvalg/statistikk/stortingsvalget-listekandidater). Dersom du scroller ned litt vil du se at denne tabellen har en kilde, det tallet tar du vare på. Se bilde nedenfor:\n\n![Kildenummer til en tabell](images/Screenshot 2023-11-07 at 10.29.10@2x.png){fig-align=\"center\" width=\"340\"}\n\n## Steg 3: Importer tabellen\n\nNå som du har det tallet på tabellen du ønsker å analysere, må vi få dette inn i `R` . For å få dette til må du skrive følgende kode, der du bytter ut `\"09443\"` med navnet på din kode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                     returnMetaFrames = TRUE)\n```\n:::\n\n\nHer tar vi og lager en liste heter \"variables\" ved å bruke funksjonen `ApiData` fra `PwWebApiData` pakken.\n\nDeretter lager vi en til liste som heter \"values\"...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                     returnMetaFrames = TRUE)\n```\n:::\n\n\nNå kan vi indeksere listen vår \"values\" for å se gjennom underlistene. Med eksempelet mitt med tabell 09443 kan vi gjøre slik:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues[[1]]$values # Region - Indeks 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"0\"   \"v01\" \"v02\" \"v03\" \"v04\" \"v05\" \"v06\" \"v07\" \"v08\" \"v09\" \"v10\" \"v11\"\n[13] \"v12\" \"v14\" \"v15\" \"v16\" \"v17\" \"v18\" \"v19\" \"v20\"\n```\n:::\n\n```{.r .cell-code}\nvalues[[2]]$values # Politisk parti - Indeks 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"00\" \"01\" \"02\" \"03\" \"04\" \"08\" \"55\" \"05\" \"06\" \"07\" \"11\" \"92\"\n```\n:::\n\n```{.r .cell-code}\nvalues[[3]]$values # Kjønn - Indeks 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\"\n```\n:::\n\n```{.r .cell-code}\nvalues[[4]]$values # Kandidater - Indeks 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Kandidater\"\n```\n:::\n\n```{.r .cell-code}\nvalues[[5]]$values # Tid - Indeks 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2005\" \"2009\" \"2013\" \"2017\" \"2021\"\n```\n:::\n:::\n\n\nDa vil man få opp alle kategoriene som man kan filtrere på senere, for eksempel ved å indeksere kjønn listen ser vi at det er to muligheter: \"1\" og \"2\". Altså, kjønn 1 og kjønn 2. Vi må nå skjønne hva disse egentlig betyr, du kan da skrive:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues[[3]] # Denne koden vil vise både verdi og \"valueTexts\" som er forklaringen på hva variabelen betyr.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  values valueTexts\n1      1       Menn\n2      2    Kvinner\n```\n:::\n:::\n\n\nGratulerer! Du har nå klart og importere data fra SSB! *Fungerte ikke dette? [Da kan du sjekke opp i dokumentasjonen i CRAN her.](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html)*\n\n## Steg 4: Datavask\n\nNext up, datavask. Som du ser i koden er ikke koden direkte leselig enda, vi ønsker å gjøre tabellen om til et dataset. Nedenfor ser du en måte å gjøre dette, da også med filtrering av variabler:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                Tid = c(\"2005\", \"2021\"), # Velger 2005 og 2021 som årstall.\n                Region = \"0\", # Velger alle regioner\n                PolitParti = c(\"Alle partier\"), # Velger alle partier\n                Kjonn = c(\"1\", \"2\") # Velger alle kjønn.\n                )\n\nmy_data <- my_data[[1]]\n```\n:::\n\n\nDen siste linjen i koden forteller R at vi ønsker å bare ha med indeks 1 (verdiene som \"1\" og \"2\" fra kjønn). Dermed forsvinner `valueTexts` og du vil se i Enviornment at tabellen går fra en liste (*list of 2)* til en data frame ( *4 obs. of 6 variables).* Dermed er vi klare til å analysere datasettet vårt.\n\n## Steg 5: Analysere og visualisering\n\nDersom man ønsker å få en liten oversikt over datasettet kan man gjøre slik som normalt, for å se de første observasjonene kan vi gjøre:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(my_data) # Vi får her fire observasjoner, fordi det er alle observasjonene vårt dataset har.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       region politisk parti   kjønn statistikkvariabel fireårlig value\n1 Hele landet   Alle partier    Menn    Listekandidater      2005  2313\n2 Hele landet   Alle partier    Menn    Listekandidater      2021  3116\n3 Hele landet   Alle partier Kvinner    Listekandidater      2005  1501\n4 Hele landet   Alle partier Kvinner    Listekandidater      2021  2058\n```\n:::\n:::\n\n\nMan kan i tillegg bruke funksjonen `comment()` fra `PxWebApiData` pakken for å se label av tabellen vi hentet ut. Dette er nyttig for å kunne huske hva tabellen egentlig handlet om, samtidig får man se kilden (SSB) og når den sist var oppdatert. I eksempelet er den sist oppdatert `2021-06-28T06:00:00Z` , altså, 28. juni 2021 kl. 06:00.\n\nTil slutt, så skal vi visualisere tabellen vi har hentet ut fra SSB. Dette gjøres likt som du er vant med fra ESS, CPDS eller lignende datasett. Her er et eksempel på et stolpediagram som ser på forskjellen mellom listekandidater i 2005 og 2021 fordelt på kjønn:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data %>% \n  ggplot(aes(x = fireårlig,\n             y = value,\n             fill = kjønn)) +\n  labs(title = \"Distribution of women and men as list candidates in political parties in Norway\n       In 2005 and 2021.\",\n       x = \"Year\",\n       y = \"Candidates in political parties\",\n       fill = \"Gender\",\n       caption = \"List candidates to Parlamentary elections in Norway by gender.\n       Source: Statistisk Sentralbyrå\n       Last updated: 28/06/2021\") +\n  theme_bw() +\n  geom_bar(stat = \"identity\",\n           position = \"dodge\") +\n  scale_fill_grey()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# Oppsummering\n\nI dette blogg innlegget lærte du hvordan man importerer tabeller fra SSB til R. Takk for at du leste dette blogg innlegget og jeg håper du ble litt klokere! Har du noen spørsmål? Gjerne ta kontakt med oss på codinghjornet\\@gmail.com!\n\n*Ønsker du og prøve deg frem med skriptet i sin helhet i RStudio? Kopier hele denne koden inn i RStudio:*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"PxWebApiData\")) install.packages(\"PxWebApiData\")\nlibrary(PxWebApiData)\nlibrary(tidyverse)\n\nvariables <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                     returnMetaFrames = TRUE)\n\nnames(variables)\n\n\nvalues <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                     returnMetaFrames = TRUE)\n\nvalues[[1]]$values # Region\n\nvalues[[2]]$values # Politisk parti\n\nvalues[[3]]$values # Kjønn\n\nvalues[[4]]$values # Kandidater\n\nvalues[[5]]$values # Tid\n\nmy_data <- ApiData(\"https://data.ssb.no/api/v0/no/table/09443\",\n                Tid = c(\"2005\", \"2021\"),\n                Region = \"0\", \n                PolitParti = c(\"Alle partier\"),\n                Kjonn = c(\"1\", \"2\")\n                )\n\nmy_data <- my_data[[1]]\n\nhead(my_data)\n\ncomment(my_data)\n\nmy_data %>% \n  ggplot(aes(x = fireårlig,\n             y = value,\n             fill = kjønn)) +\n  labs(title = \"Distribution of women and men as list candidates in political parties in Norway\n       In 2005 and 2021.\",\n       x = \"Year\",\n       y = \"Candidates in political parties\",\n       fill = \"Gender\",\n       caption = \"List candidates to Parlamentary elections in Norway by gender.\n       Source: Statistisk Sentralbyrå\n       Last updated: 28/06/2021\") +\n  theme_bw() +\n  geom_bar(stat = \"identity\",\n           position = \"dodge\") +\n  scale_fill_grey()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}